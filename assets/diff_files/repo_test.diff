diff --git a/.github/workflows/ci.yml b/.github/workflows/ci.yml
index 843e95c..63bae0e 100644
--- a/.github/workflows/ci.yml
+++ b/.github/workflows/ci.yml
@@ -26,6 +26,11 @@ jobs:
       - name: Install xmlstarlet
         run: sudo apt-get install xmlstarlet
 
+      - name: Lint code
+        run: just lint
+        env:
+          CARGO_TERM_COLOR: always
+
       - name: Build and run tests
         run: |
           just test
@@ -39,18 +44,25 @@ jobs:
         env:
           CARGO_TERM_COLOR: always
       
-      - name: Coverage scope action
+      - name: Coverage scope action main
+        if: github.ref == 'refs/heads/main'
         uses: ./ # Uses an action in the root directory
         id: coverage
         with:
           coverage-filepath: cobertura.xml
           branch: main
           threshold: 60
+          fail-on-total: true
 
-      - name: Lint code
-        run: just lint
-        env:
-          CARGO_TERM_COLOR: always
+      - name: Coverage scope action PR
+        if: github.ref != 'refs/heads/main'
+        uses: ./ # Uses an action in the root directory
+        id: coverage-pr
+        with:
+          coverage-filepath: cobertura.xml
+          branch: ${{ github.ref }}
+          threshold: 60
+          fail-on-total: false
       
       - name: Create the Badge
         if: github.ref == 'refs/heads/main'
diff --git a/action.yml b/action.yml
index 4c922c0..1d85aa8 100644
--- a/action.yml
+++ b/action.yml
@@ -13,6 +13,10 @@ inputs:
     description: "The threshold to determine if coverage is acceptable"
     required: true
     default: "80"
+  fail-on-total:
+    description: "Whether to fail if total coverage is below threshold"
+    required: true
+    default: "false"
 
 runs:
   using: "docker"
diff --git a/entrypoint.sh b/entrypoint.sh
index cf6e526..cfa33f9 100755
--- a/entrypoint.sh
+++ b/entrypoint.sh
@@ -3,5 +3,14 @@
 echo "Running with coverage file $1"
 echo "Comparing with branch $2"
 echo "Using threshold $3%"
+echo "Failing on total coverage below threshold: $4"
 
-/coverage_scope --coverage-file $GITHUB_WORKSPACE/$1 --branch $2 --threshold $3 --git-dir $GITHUB_WORKSPACE
+# Lower case argument 4 and check if it is true
+fail_on_total_arg=$(echo "$4" | tr '[:upper:]' '[:lower:]')
+if [ "$fail_on_total_arg" = "true" ]; then
+    fail_on_total="--fail-on-total"
+else
+    fail_on_total=""
+fi
+
+/coverage_scope --coverage-file $GITHUB_WORKSPACE/$1 --branch $2 --threshold $3 --git-dir $GITHUB_WORKSPACE $fail_on_total
diff --git a/justfile b/justfile
index dc5ea81..110a8c2 100644
--- a/justfile
+++ b/justfile
@@ -10,8 +10,12 @@ test-coverage:
 ci: lint test
     cargo check --all-targets --all-features
 
+test-local:
+    cargo tarpaulin --out Xml
+    cargo run -- --coverage-file cobertura.xml --branch main --threshold 100 --fail-on-total true
+
 test-docker-actions-env:
     cargo tarpaulin --out Xml
     docker build -t coverage-scope .
-    docker run --rm -it -v $(pwd):/repo -e "GITHUB_WORKSPACE=/repo" coverage-scope cobertura.xml main 0
+    docker run --rm -it -v $(pwd):/repo -e "GITHUB_WORKSPACE=/repo" coverage-scope cobertura.xml main 80 true
     
\ No newline at end of file
diff --git a/src/main.rs b/src/main.rs
index 586de15..f9241aa 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -40,26 +40,47 @@ struct Args {
     /// If not specified, the current directory is used
     #[arg(short, long)]
     git_dir: Option<String>,
-}
 
-fn main() {
-    let args = Args::parse();
-
-    // Read xml file
-    let file_string = match std::fs::read_to_string(&args.coverage_file) {
-        Ok(f) => f,
-        Err(e) => panic!("Error reading file {}: {}", args.coverage_file, e),
-    };
+    /// Fail on total coverage below threshold
+    #[arg(short, long)]
+    fail_on_total: bool,
+}
 
-    if args.git_dir.is_some() {
-        // Check if dir exists
-        let git_dir = args.git_dir.unwrap();
+fn change_directory(dir: Option<String>) {
+    // Check if dir exists
+    if let Some(dir) = dir {
+        let git_dir = dir;
         if !std::path::Path::new(&git_dir).exists() {
             panic!("Directory does not exist: {git_dir}");
         }
 
-        std::env::set_current_dir(&git_dir).unwrap();
+        std::env::set_current_dir(git_dir.clone())
+            .unwrap_or_else(|_| panic!("Error changing directory to {git_dir}"));
     }
+}
+
+fn get_coverage_on_diff(diff_string: &str, coverage: &Coverage, threshold: f32) -> bool {
+    let diff_files = DiffFiles::new(diff_string);
+    let line_coverage_percentage = diff_files.calculate_line_coverage(coverage.clone());
+    println!("Current changes coverage is {line_coverage_percentage:.2}%");
+    let mut threshold_not_met = false;
+    if line_coverage_percentage < threshold {
+        println!(
+            "Current changes coverage is below threshold of {:.2}%",
+            threshold
+        );
+        threshold_not_met = true;
+    }
+
+    threshold_not_met
+}
+
+fn run_app(args: Args) {
+    // Format string
+    let file_string = std::fs::read_to_string(&args.coverage_file)
+        .unwrap_or_else(|_| panic!("Error reading file {}", args.coverage_file));
+
+    change_directory(args.git_dir);
 
     // Diff command
     let cmd = String::from("git diff ") + &args.branch + " --diff-filter=d";
@@ -68,29 +89,117 @@ fn main() {
 
     // Parse diff file
     let coverage: Coverage = Coverage::new(&file_string);
+    let mut threshold_not_met = false;
 
     if !diff_file_string.is_empty() {
-        let diff_files = DiffFiles::new(&diff_file_string);
-        let line_coverage_percentage = diff_files.calculate_line_coverage(coverage.clone());
-        println!("Git diff coverage is {line_coverage_percentage:.2}%");
-
-        if line_coverage_percentage < args.threshold {
-            println!(
-                "Git diff coverage is below threshold of {:.2}%",
-                args.threshold
-            );
-            std::process::exit(1);
-        }
+        threshold_not_met = get_coverage_on_diff(&diff_file_string, &coverage, args.threshold);
     }
 
     let total_coverage_percentage = coverage.get_total_coverage();
     println!("Total coverage is {total_coverage_percentage:.2}%");
 
-    if total_coverage_percentage < args.threshold as f64 {
+    if args.fail_on_total && total_coverage_percentage < args.threshold as f64 {
         println!(
             "Total coverage is below threshold of {:.2}%",
             args.threshold
         );
+        threshold_not_met = true;
+    }
+
+    if threshold_not_met {
         std::process::exit(1);
     }
 }
+
+fn main() {
+    let args = Args::parse();
+    run_app(args);
+}
+
+#[cfg(test)]
+mod tests {
+    use super::*;
+
+    #[test]
+    fn test_change_directory() {
+        // Test existing directory
+        change_directory(Some(String::from(".")));
+        assert_eq!(
+            std::env::current_dir().unwrap().display().to_string(),
+            std::env::current_dir().unwrap().display().to_string()
+        );
+
+        // Test non-existing directory
+        assert!(
+            std::panic::catch_unwind(|| change_directory(Some(String::from(
+                "non-existing-directory"
+            ))))
+            .is_err()
+        );
+    }
+
+    #[test]
+    fn test_run_command() {
+        let result = run_command("echo test");
+        assert_eq!(result.trim(), "test");
+    }
+
+    #[test]
+    fn test_get_coverage_on_diff() {
+        // Set up sample input data
+        let diff_string = std::fs::read_to_string("assets/diff_files/coverage.diff").unwrap();
+        let coverage_string =
+            std::fs::read_to_string("assets/coberta_coverage/coverage.xml").unwrap();
+        let coverage = Coverage::new(&coverage_string);
+
+        // Test with threshold below actual coverage
+        let result1 = get_coverage_on_diff(diff_string.as_str(), &coverage, 80.0);
+        assert_eq!(result1, true);
+
+        // Test with threshold above actual coverage
+        let result2 = get_coverage_on_diff(diff_string.as_str(), &coverage, 20.0);
+        assert_eq!(result2, false);
+    }
+
+    #[test]
+    fn test_run_app() {
+        // Set up sample input data
+        let expected_success_args = Args {
+            coverage_file: "".to_string(),
+            git_dir: Some(".".into()),
+            branch: "main".to_string(),
+            threshold: 60.0,
+            fail_on_total: false,
+        };
+        let expected_fail_args = Args {
+            coverage_file: "coverage.txt".to_string(),
+            git_dir: Some(".".into()),
+            branch: "main".to_string(),
+            threshold: 60.0,
+            fail_on_total: true,
+        };
+
+        // Write coverage file to disk
+        let temp_dir = TempDir::new().unwrap();
+        let coverage_file_path = temp_dir.path().join("coverage.txt");
+        let mut coverage_file = File::create(&coverage_file_path).unwrap();
+        coverage_file
+            .write_all(coverage_file_content.as_bytes())
+            .unwrap();
+
+        // Test with coverage above threshold
+        let success_args = expected_success_args.clone();
+        let success_result = run_app(success_args);
+        assert_eq!(success_result.code(), Some(0));
+
+        // Test with coverage below threshold but fail_on_total is false
+        let fail_args = expected_fail_args.clone();
+        let fail_result = run_app(fail_args);
+        assert_eq!(fail_result.code(), Some(0));
+
+        // Test with coverage below threshold and fail_on_total is true
+        let fail_total_args = expected_fail_args.clone();
+        let fail_total_result = run_app(fail_total_args);
+        assert_eq!(fail_total_result.code(), Some(1));
+    }
+}
