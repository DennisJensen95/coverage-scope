diff --git a/.github/workflows/ci.yml b/.github/workflows/ci.yml
index 843e95c..d56be4d 100644
--- a/.github/workflows/ci.yml
+++ b/.github/workflows/ci.yml
@@ -26,6 +26,11 @@ jobs:
       - name: Install xmlstarlet
         run: sudo apt-get install xmlstarlet
 
+      - name: Lint code
+        run: just lint
+        env:
+          CARGO_TERM_COLOR: always
+
       - name: Build and run tests
         run: |
           just test
@@ -39,19 +44,14 @@ jobs:
         env:
           CARGO_TERM_COLOR: always
       
-      - name: Coverage scope action
+      - name: Coverage scope action main
         uses: ./ # Uses an action in the root directory
         id: coverage
         with:
           coverage-filepath: cobertura.xml
           branch: main
-          threshold: 60
+          threshold: 90
 
-      - name: Lint code
-        run: just lint
-        env:
-          CARGO_TERM_COLOR: always
-      
       - name: Create the Badge
         if: github.ref == 'refs/heads/main'
         uses: schneegans/dynamic-badges-action@v1.0.0
diff --git a/Cargo.lock b/Cargo.lock
index 305b6dd..99aa9ea 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -2,6 +2,15 @@
 # It is not intended for manual editing.
 version = 3
 
+[[package]]
+name = "aho-corasick"
+version = "1.0.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "67fc08ce920c31afb70f013dcce1bfc3a3195de6a228474e45e1f145b36f8d04"
+dependencies = [
+ "memchr",
+]
+
 [[package]]
 name = "android_system_properties"
 version = "0.1.5"
@@ -180,6 +189,7 @@ name = "coverage_scope"
 version = "0.1.0"
 dependencies = [
  "clap",
+ "mockall",
  "patch",
  "serde",
  "serde-xml-rs",
@@ -229,6 +239,24 @@ dependencies = [
  "syn 2.0.15",
 ]
 
+[[package]]
+name = "difflib"
+version = "0.4.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6184e33543162437515c2e2b48714794e37845ec9851711914eec9d308f6ebe8"
+
+[[package]]
+name = "downcast"
+version = "0.11.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1435fa1053d8b2fbbe9be7e97eca7f33d37b28409959813daefc1446a14247f1"
+
+[[package]]
+name = "either"
+version = "1.8.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "7fcaabb2fef8c910e7f4c7ce9f67a1283a1715879a7c230ca9d6d1ae31f16d91"
+
 [[package]]
 name = "errno"
 version = "0.3.1"
@@ -250,6 +278,21 @@ dependencies = [
  "libc",
 ]
 
+[[package]]
+name = "float-cmp"
+version = "0.9.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "98de4bbd547a563b716d8dfa9aad1cb19bfab00f4fa09a6a4ed21dbcf44ce9c4"
+dependencies = [
+ "num-traits",
+]
+
+[[package]]
+name = "fragile"
+version = "2.0.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6c2141d6d6c8512188a7891b4b01590a45f6dac67afb4f255c4124dbb86d4eaa"
+
 [[package]]
 name = "heck"
 version = "0.4.1"
@@ -309,6 +352,15 @@ dependencies = [
  "windows-sys",
 ]
 
+[[package]]
+name = "itertools"
+version = "0.10.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b0fd2260e829bddf4cb6ea802289de2f86d6a7a690192fbe91b3f46e0f2c8473"
+dependencies = [
+ "either",
+]
+
 [[package]]
 name = "js-sys"
 version = "0.3.61"
@@ -318,6 +370,12 @@ dependencies = [
  "wasm-bindgen",
 ]
 
+[[package]]
+name = "lazy_static"
+version = "1.4.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646"
+
 [[package]]
 name = "libc"
 version = "0.2.142"
@@ -360,6 +418,33 @@ version = "0.2.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "68354c5c6bd36d73ff3feceb05efa59b6acb7626617f4962be322a825e61f79a"
 
+[[package]]
+name = "mockall"
+version = "0.11.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "4c84490118f2ee2d74570d114f3d0493cbf02790df303d2707606c3e14e07c96"
+dependencies = [
+ "cfg-if",
+ "downcast",
+ "fragile",
+ "lazy_static",
+ "mockall_derive",
+ "predicates",
+ "predicates-tree",
+]
+
+[[package]]
+name = "mockall_derive"
+version = "0.11.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "22ce75669015c4f47b289fd4d4f56e894e4c96003ffdf3ac51313126f94c6cbb"
+dependencies = [
+ "cfg-if",
+ "proc-macro2",
+ "quote",
+ "syn 1.0.109",
+]
+
 [[package]]
 name = "nom"
 version = "7.1.3"
@@ -381,6 +466,12 @@ dependencies = [
  "nom",
 ]
 
+[[package]]
+name = "normalize-line-endings"
+version = "0.3.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "61807f77802ff30975e01f4f071c8ba10c022052f98b3294119f3e615d13e5be"
+
 [[package]]
 name = "num-integer"
 version = "0.1.45"
@@ -417,6 +508,36 @@ dependencies = [
  "nom_locate",
 ]
 
+[[package]]
+name = "predicates"
+version = "2.1.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "59230a63c37f3e18569bdb90e4a89cbf5bf8b06fea0b84e65ea10cc4df47addd"
+dependencies = [
+ "difflib",
+ "float-cmp",
+ "itertools",
+ "normalize-line-endings",
+ "predicates-core",
+ "regex",
+]
+
+[[package]]
+name = "predicates-core"
+version = "1.0.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b794032607612e7abeb4db69adb4e33590fa6cf1149e95fd7cb00e634b92f174"
+
+[[package]]
+name = "predicates-tree"
+version = "1.0.9"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "368ba315fb8c5052ab692e68a0eefec6ec57b23a36959c14496f0b0df2c0cecf"
+dependencies = [
+ "predicates-core",
+ "termtree",
+]
+
 [[package]]
 name = "proc-macro2"
 version = "1.0.56"
@@ -435,6 +556,23 @@ dependencies = [
  "proc-macro2",
 ]
 
+[[package]]
+name = "regex"
+version = "1.8.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "af83e617f331cc6ae2da5443c602dfa5af81e517212d9d611a5b3ba1777b5370"
+dependencies = [
+ "aho-corasick",
+ "memchr",
+ "regex-syntax",
+]
+
+[[package]]
+name = "regex-syntax"
+version = "0.7.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a5996294f19bd3aae0453a862ad728f60e6600695733dd5df01da90c54363a3c"
+
 [[package]]
 name = "rustix"
 version = "0.37.19"
@@ -524,6 +662,12 @@ dependencies = [
  "winapi-util",
 ]
 
+[[package]]
+name = "termtree"
+version = "0.4.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "3369f5ac52d5eb6ab48c6b4ffdc8efbcad6b89c765749064ba298f2c68a16a76"
+
 [[package]]
 name = "thiserror"
 version = "1.0.40"
diff --git a/Cargo.toml b/Cargo.toml
index e1dd918..1ae6ed5 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -5,6 +5,7 @@ edition = "2021"
 
 [dependencies]
 clap = { version = "4.2.7", features = ["derive"] }
+mockall = "0.11.4"
 patch = "0.7.0"
 serde = { version = "1.0.130", features = ["derive"]}
 serde-xml-rs = "0.6.0"
diff --git a/action.yml b/action.yml
index 4c922c0..7424524 100644
--- a/action.yml
+++ b/action.yml
@@ -9,8 +9,12 @@ inputs:
     description: "The branch to determine coverage for"
     required: true
     default: "main"
-  threshold:
-    description: "The threshold to determine if coverage is acceptable"
+  threshold-change:
+    description: "The threshold to determine if coverage for the changed files is acceptable"
+    required: true
+    default: "80"
+  threshold-total:
+    description: "The threshold to determine if total coverage is acceptable"
     required: true
     default: "80"
 
@@ -20,4 +24,5 @@ runs:
   args:
     - ${{ inputs.coverage-filepath }}
     - ${{ inputs.branch }}
-    - ${{ inputs.threshold }}
+    - ${{ inputs.threshold-change }}
+    - ${{ inputs.threshold-total }}
diff --git a/assets/coberta_coverage/repo_coverage.xml b/assets/coberta_coverage/repo_coverage.xml
new file mode 100644
index 0000000..a922676
--- /dev/null
+++ b/assets/coberta_coverage/repo_coverage.xml
@@ -0,0 +1 @@
+<?xml version="1.0"?><coverage lines-covered="87" lines-valid="115" line-rate="0.7565217391304347" branches-covered="0" branches-valid="0" branch-rate="0" complexity="0" version="1.9" timestamp="1683366449"><sources><source>/Users/dennisjensen/GIT/CoverageScope</source></sources><packages><package name="src" line-rate="0.7565217391304347" branch-rate="0" complexity="0"><classes><class name="coberta_xml_parser" filename="src/coberta_xml_parser.rs" line-rate="0.9705882352941176" branch-rate="0" complexity="0"><methods/><lines><line number="91" hits="36"/><line number="92" hits="36"/><line number="95" hits="8"/><line number="96" hits="8"/><line number="98" hits="72"/><line number="99" hits="32"/><line number="100" hits="12"/><line number="101" hits="12"/><line number="102" hits="12"/><line number="103" hits="0"/><line number="107" hits="8"/><line number="113" hits="10"/><line number="114" hits="10"/><line number="116" hits="70"/><line number="117" hits="20"/><line number="119" hits="10"/><line number="122" hits="8"/><line number="123" hits="8"/><line number="125" hits="40"/><line number="126" hits="24"/><line number="127" hits="8"/><line number="130" hits="8"/><line number="135" hits="5"/><line number="136" hits="5"/><line number="137" hits="5"/><line number="140" hits="1"/><line number="141" hits="1"/><line number="144" hits="8"/><line number="145" hits="8"/><line number="147" hits="24"/><line number="148" hits="24"/><line number="149" hits="24"/><line number="150" hits="8"/><line number="155" hits="8"/></lines></class><class name="git_diff_parser" filename="src/git_diff_parser.rs" line-rate="0.9696969696969697" branch-rate="0" complexity="0"><methods/><lines><line number="10" hits="3"/><line number="12" hits="6"/><line number="13" hits="3"/><line number="14" hits="0"/><line number="17" hits="3"/><line number="19" hits="21"/><line number="20" hits="9"/><line number="22" hits="9"/><line number="24" hits="27"/><line number="25" hits="9"/><line number="26" hits="105"/><line number="27" hits="48"/><line number="32" hits="9"/><line number="34" hits="9"/><line number="37" hits="3"/><line number="40" hits="3"/><line number="41" hits="3"/><line number="42" hits="3"/><line number="43" hits="12"/><line number="44" hits="9"/><line number="46" hits="9"/><line number="47" hits="18"/><line number="48" hits="3"/><line number="51" hits="6"/><line number="52" hits="6"/><line number="54" hits="6"/><line number="55" hits="6"/><line number="56" hits="78"/><line number="57" hits="45"/><line number="58" hits="9"/><line number="62" hits="6"/><line number="63" hits="6"/><line number="66" hits="3"/></lines></class><class name="main" filename="src/main.rs" line-rate="0.4583333333333333" branch-rate="0" complexity="0"><methods/><lines><line number="10" hits="1"/><line number="11" hits="1"/><line number="13" hits="1"/><line number="17" hits="1"/><line number="18" hits="1"/><line number="19" hits="0"/><line number="49" hits="2"/><line number="51" hits="4"/><line number="52" hits="2"/><line number="53" hits="2"/><line number="54" hits="1"/><line number="57" hits="1"/><line number="58" hits="2"/><line number="62" hits="2"/><line number="63" hits="2"/><line number="64" hits="2"/><line number="65" hits="2"/><line number="66" hits="2"/><line number="67" hits="3"/><line number="68" hits="1"/><line number="70" hits="1"/><line number="72" hits="1"/><line number="75" hits="2"/><line number="78" hits="0"/><line number="79" hits="0"/><line number="80" hits="0"/><line number="81" hits="0"/><line number="83" hits="0"/><line number="85" hits="0"/><line number="86" hits="0"/><line number="87" hits="0"/><line number="88" hits="0"/><line number="90" hits="0"/><line number="91" hits="0"/><line number="92" hits="0"/><line number="94" hits="0"/><line number="95" hits="0"/><line number="98" hits="0"/><line number="99" hits="0"/><line number="101" hits="0"/><line number="102" hits="0"/><line number="104" hits="0"/><line number="106" hits="0"/><line number="109" hits="0"/><line number="110" hits="0"/><line number="114" hits="0"/><line number="115" hits="0"/><line number="116" hits="0"/></lines></class></classes></package></packages></coverage>
\ No newline at end of file
diff --git a/assets/diff_files/repo_test.diff b/assets/diff_files/repo_test.diff
new file mode 100644
index 0000000..467a3d6
--- /dev/null
+++ b/assets/diff_files/repo_test.diff
@@ -0,0 +1,296 @@
+diff --git a/.github/workflows/ci.yml b/.github/workflows/ci.yml
+index 843e95c..63bae0e 100644
+--- a/.github/workflows/ci.yml
++++ b/.github/workflows/ci.yml
+@@ -26,6 +26,11 @@ jobs:
+       - name: Install xmlstarlet
+         run: sudo apt-get install xmlstarlet
+ 
++      - name: Lint code
++        run: just lint
++        env:
++          CARGO_TERM_COLOR: always
++
+       - name: Build and run tests
+         run: |
+           just test
+@@ -39,18 +44,25 @@ jobs:
+         env:
+           CARGO_TERM_COLOR: always
+       
+-      - name: Coverage scope action
++      - name: Coverage scope action main
++        if: github.ref == 'refs/heads/main'
+         uses: ./ # Uses an action in the root directory
+         id: coverage
+         with:
+           coverage-filepath: cobertura.xml
+           branch: main
+           threshold: 60
++          fail-on-total: true
+ 
+-      - name: Lint code
+-        run: just lint
+-        env:
+-          CARGO_TERM_COLOR: always
++      - name: Coverage scope action PR
++        if: github.ref != 'refs/heads/main'
++        uses: ./ # Uses an action in the root directory
++        id: coverage-pr
++        with:
++          coverage-filepath: cobertura.xml
++          branch: ${{ github.ref }}
++          threshold: 60
++          fail-on-total: false
+       
+       - name: Create the Badge
+         if: github.ref == 'refs/heads/main'
+diff --git a/action.yml b/action.yml
+index 4c922c0..1d85aa8 100644
+--- a/action.yml
++++ b/action.yml
+@@ -13,6 +13,10 @@ inputs:
+     description: "The threshold to determine if coverage is acceptable"
+     required: true
+     default: "80"
++  fail-on-total:
++    description: "Whether to fail if total coverage is below threshold"
++    required: true
++    default: "false"
+ 
+ runs:
+   using: "docker"
+diff --git a/entrypoint.sh b/entrypoint.sh
+index cf6e526..cfa33f9 100755
+--- a/entrypoint.sh
++++ b/entrypoint.sh
+@@ -3,5 +3,14 @@
+ echo "Running with coverage file $1"
+ echo "Comparing with branch $2"
+ echo "Using threshold $3%"
++echo "Failing on total coverage below threshold: $4"
+ 
+-/coverage_scope --coverage-file $GITHUB_WORKSPACE/$1 --branch $2 --threshold $3 --git-dir $GITHUB_WORKSPACE
++# Lower case argument 4 and check if it is true
++fail_on_total_arg=$(echo "$4" | tr '[:upper:]' '[:lower:]')
++if [ "$fail_on_total_arg" = "true" ]; then
++    fail_on_total="--fail-on-total"
++else
++    fail_on_total=""
++fi
++
++/coverage_scope --coverage-file $GITHUB_WORKSPACE/$1 --branch $2 --threshold $3 --git-dir $GITHUB_WORKSPACE $fail_on_total
+diff --git a/justfile b/justfile
+index dc5ea81..110a8c2 100644
+--- a/justfile
++++ b/justfile
+@@ -10,8 +10,12 @@ test-coverage:
+ ci: lint test
+     cargo check --all-targets --all-features
+ 
++test-local:
++    cargo tarpaulin --out Xml
++    cargo run -- --coverage-file cobertura.xml --branch main --threshold 100 --fail-on-total true
++
+ test-docker-actions-env:
+     cargo tarpaulin --out Xml
+     docker build -t coverage-scope .
+-    docker run --rm -it -v $(pwd):/repo -e "GITHUB_WORKSPACE=/repo" coverage-scope cobertura.xml main 0
++    docker run --rm -it -v $(pwd):/repo -e "GITHUB_WORKSPACE=/repo" coverage-scope cobertura.xml main 80 true
+     
+\ No newline at end of file
+diff --git a/src/main.rs b/src/main.rs
+index 586de15..f9241aa 100644
+--- a/src/main.rs
++++ b/src/main.rs
+@@ -40,26 +40,47 @@ struct Args {
+     /// If not specified, the current directory is used
+     #[arg(short, long)]
+     git_dir: Option<String>,
+-}
+ 
+-fn main() {
+-    let args = Args::parse();
+-
+-    // Read xml file
+-    let file_string = match std::fs::read_to_string(&args.coverage_file) {
+-        Ok(f) => f,
+-        Err(e) => panic!("Error reading file {}: {}", args.coverage_file, e),
+-    };
++    /// Fail on total coverage below threshold
++    #[arg(short, long)]
++    fail_on_total: bool,
++}
+ 
+-    if args.git_dir.is_some() {
+-        // Check if dir exists
+-        let git_dir = args.git_dir.unwrap();
++fn change_directory(dir: Option<String>) {
++    // Check if dir exists
++    if let Some(dir) = dir {
++        let git_dir = dir;
+         if !std::path::Path::new(&git_dir).exists() {
+             panic!("Directory does not exist: {git_dir}");
+         }
+ 
+-        std::env::set_current_dir(&git_dir).unwrap();
++        std::env::set_current_dir(git_dir.clone())
++            .unwrap_or_else(|_| panic!("Error changing directory to {git_dir}"));
+     }
++}
++
++fn get_coverage_on_diff(diff_string: &str, coverage: &Coverage, threshold: f32) -> bool {
++    let diff_files = DiffFiles::new(diff_string);
++    let line_coverage_percentage = diff_files.calculate_line_coverage(coverage.clone());
++    println!("Current changes coverage is {line_coverage_percentage:.2}%");
++    let mut threshold_not_met = false;
++    if line_coverage_percentage < threshold {
++        println!(
++            "Current changes coverage is below threshold of {:.2}%",
++            threshold
++        );
++        threshold_not_met = true;
++    }
++
++    threshold_not_met
++}
++
++fn run_app(args: Args) {
++    // Format string
++    let file_string = std::fs::read_to_string(&args.coverage_file)
++        .unwrap_or_else(|_| panic!("Error reading file {}", args.coverage_file));
++
++    change_directory(args.git_dir);
+ 
+     // Diff command
+     let cmd = String::from("git diff ") + &args.branch + " --diff-filter=d";
+@@ -68,29 +89,117 @@ fn main() {
+ 
+     // Parse diff file
+     let coverage: Coverage = Coverage::new(&file_string);
++    let mut threshold_not_met = false;
+ 
+     if !diff_file_string.is_empty() {
+-        let diff_files = DiffFiles::new(&diff_file_string);
+-        let line_coverage_percentage = diff_files.calculate_line_coverage(coverage.clone());
+-        println!("Git diff coverage is {line_coverage_percentage:.2}%");
+-
+-        if line_coverage_percentage < args.threshold {
+-            println!(
+-                "Git diff coverage is below threshold of {:.2}%",
+-                args.threshold
+-            );
+-            std::process::exit(1);
+-        }
++        threshold_not_met = get_coverage_on_diff(&diff_file_string, &coverage, args.threshold);
+     }
+ 
+     let total_coverage_percentage = coverage.get_total_coverage();
+     println!("Total coverage is {total_coverage_percentage:.2}%");
+ 
+-    if total_coverage_percentage < args.threshold as f64 {
++    if args.fail_on_total && total_coverage_percentage < args.threshold as f64 {
+         println!(
+             "Total coverage is below threshold of {:.2}%",
+             args.threshold
+         );
++        threshold_not_met = true;
++    }
++
++    if threshold_not_met {
+         std::process::exit(1);
+     }
+ }
++
++fn main() {
++    let args = Args::parse();
++    run_app(args);
++}
++
++#[cfg(test)]
++mod tests {
++    use super::*;
++
++    #[test]
++    fn test_change_directory() {
++        // Test existing directory
++        change_directory(Some(String::from(".")));
++        assert_eq!(
++            std::env::current_dir().unwrap().display().to_string(),
++            std::env::current_dir().unwrap().display().to_string()
++        );
++
++        // Test non-existing directory
++        assert!(
++            std::panic::catch_unwind(|| change_directory(Some(String::from(
++                "non-existing-directory"
++            ))))
++            .is_err()
++        );
++    }
++
++    #[test]
++    fn test_run_command() {
++        let result = run_command("echo test");
++        assert_eq!(result.trim(), "test");
++    }
++
++    #[test]
++    fn test_get_coverage_on_diff() {
++        // Set up sample input data
++        let diff_string = std::fs::read_to_string("assets/diff_files/coverage.diff").unwrap();
++        let coverage_string =
++            std::fs::read_to_string("assets/coberta_coverage/coverage.xml").unwrap();
++        let coverage = Coverage::new(&coverage_string);
++
++        // Test with threshold below actual coverage
++        let result1 = get_coverage_on_diff(diff_string.as_str(), &coverage, 80.0);
++        assert_eq!(result1, true);
++
++        // Test with threshold above actual coverage
++        let result2 = get_coverage_on_diff(diff_string.as_str(), &coverage, 20.0);
++        assert_eq!(result2, false);
++    }
++
++    #[test]
++    fn test_run_app() {
++        // Set up sample input data
++        let expected_success_args = Args {
++            coverage_file: "".to_string(),
++            git_dir: Some(".".into()),
++            branch: "main".to_string(),
++            threshold: 60.0,
++            fail_on_total: false,
++        };
++        let expected_fail_args = Args {
++            coverage_file: "coverage.txt".to_string(),
++            git_dir: Some(".".into()),
++            branch: "main".to_string(),
++            threshold: 60.0,
++            fail_on_total: true,
++        };
++
++        // Write coverage file to disk
++        let temp_dir = TempDir::new().unwrap();
++        let coverage_file_path = temp_dir.path().join("coverage.txt");
++        let mut coverage_file = File::create(&coverage_file_path).unwrap();
++        coverage_file
++            .write_all(coverage_file_content.as_bytes())
++            .unwrap();
++
++        // Test with coverage above threshold
++        let success_args = expected_success_args.clone();
++        let success_result = run_app(success_args);
++        assert_eq!(success_result.code(), Some(0));
++
++        // Test with coverage below threshold but fail_on_total is false
++        let fail_args = expected_fail_args.clone();
++        let fail_result = run_app(fail_args);
++        assert_eq!(fail_result.code(), Some(0));
++
++        // Test with coverage below threshold and fail_on_total is true
++        let fail_total_args = expected_fail_args.clone();
++        let fail_total_result = run_app(fail_total_args);
++        assert_eq!(fail_total_result.code(), Some(1));
++    }
++}
diff --git a/entrypoint.sh b/entrypoint.sh
index cf6e526..9450c1d 100755
--- a/entrypoint.sh
+++ b/entrypoint.sh
@@ -2,6 +2,7 @@
 
 echo "Running with coverage file $1"
 echo "Comparing with branch $2"
-echo "Using threshold $3%"
+echo "Using threshold for change: $3%"
+echo "using threshold for total: $4"
 
-/coverage_scope --coverage-file $GITHUB_WORKSPACE/$1 --branch $2 --threshold $3 --git-dir $GITHUB_WORKSPACE
+/coverage_scope --coverage-file $GITHUB_WORKSPACE/$1 --branch $2 --threshold-change $3 --threshold-total $4 --git-dir $GITHUB_WORKSPACE
diff --git a/justfile b/justfile
index dc5ea81..3c3963e 100644
--- a/justfile
+++ b/justfile
@@ -10,8 +10,12 @@ test-coverage:
 ci: lint test
     cargo check --all-targets --all-features
 
+test-local:
+    cargo tarpaulin --out Xml
+    cargo run -- --coverage-file cobertura.xml --branch main --threshold-change 100 --threshold-total 100
+
 test-docker-actions-env:
     cargo tarpaulin --out Xml
     docker build -t coverage-scope .
-    docker run --rm -it -v $(pwd):/repo -e "GITHUB_WORKSPACE=/repo" coverage-scope cobertura.xml main 0
+    docker run --rm -it -v $(pwd):/repo -e "GITHUB_WORKSPACE=/repo" coverage-scope cobertura.xml main 80 90
     
\ No newline at end of file
diff --git a/src/main.rs b/src/main.rs
index 586de15..48a6908 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -5,18 +5,27 @@ mod git_diff_parser;
 
 use coberta_xml_parser::Coverage;
 use git_diff_parser::DiffFiles;
+use mockall::*;
 
-// Make a function that runs a system command
-fn run_command(command: &str) -> String {
-    let output = std::process::Command::new("bash")
-        .arg("-c")
-        .arg(command)
-        .output()
-        .expect("failed to execute process");
-
-    match String::from_utf8(output.stdout) {
-        Ok(s) => s,
-        Err(e) => panic!("Invalid UTF-8 sequence: {e}"),
+struct CommandRunner;
+
+#[automock]
+pub trait CommandRunnerTrait {
+    fn run_command(&self, command: &str) -> String;
+}
+
+impl CommandRunnerTrait for CommandRunner {
+    fn run_command(&self, command: &str) -> String {
+        let output = std::process::Command::new("bash")
+            .arg("-c")
+            .arg(command)
+            .output()
+            .expect("failed to execute process");
+
+        match String::from_utf8(output.stdout) {
+            Ok(s) => s,
+            Err(e) => panic!("Invalid UTF-8 sequence: {e}"),
+        }
     }
 }
 
@@ -32,9 +41,13 @@ struct Args {
     #[arg(short, long)]
     branch: String,
 
-    /// Fail if coverage is below this threshold
+    /// Fail if coverage of changed files is below this threshold
+    #[arg(short, long, default_value = "0.0")]
+    threshold_change: f32,
+
+    /// Fail if total coverage is below this threshold
     #[arg(short, long, default_value = "0.0")]
-    threshold: f32,
+    threshold_total: f32,
 
     /// Path to the git repository
     /// If not specified, the current directory is used
@@ -42,55 +55,175 @@ struct Args {
     git_dir: Option<String>,
 }
 
-fn main() {
-    let args = Args::parse();
+fn change_directory(dir: Option<String>) {
+    // Check if dir exists
+    if let Some(dir) = dir {
+        let git_dir = dir;
 
-    // Read xml file
-    let file_string = match std::fs::read_to_string(&args.coverage_file) {
-        Ok(f) => f,
-        Err(e) => panic!("Error reading file {}: {}", args.coverage_file, e),
-    };
-
-    if args.git_dir.is_some() {
-        // Check if dir exists
-        let git_dir = args.git_dir.unwrap();
         if !std::path::Path::new(&git_dir).exists() {
             panic!("Directory does not exist: {git_dir}");
         }
 
-        std::env::set_current_dir(&git_dir).unwrap();
+        std::env::set_current_dir(git_dir.clone())
+            .unwrap_or_else(|_| panic!("Error changing directory to {git_dir}"));
     }
+}
+
+fn get_coverage_on_diff(diff_string: &str, coverage: &Coverage, threshold: f32) -> bool {
+    let diff_files = DiffFiles::new(diff_string);
+    let line_coverage_percentage = diff_files.calculate_line_coverage(coverage.clone());
+    println!("Current changes coverage is {line_coverage_percentage:.2}%");
+    let mut threshold_not_met = false;
+    if line_coverage_percentage < threshold {
+        println!(
+            "Current changes coverage is below threshold of {:.2}%",
+            threshold
+        );
+        threshold_not_met = true;
+    }
+
+    threshold_not_met
+}
+
+fn run_app(args: Args, command_runner: &dyn CommandRunnerTrait) -> bool {
+    // Format string
+    let file_string = std::fs::read_to_string(&args.coverage_file)
+        .unwrap_or_else(|_| panic!("Error reading file {}", args.coverage_file));
+
+    change_directory(args.git_dir);
 
     // Diff command
     let cmd = String::from("git diff ") + &args.branch + " --diff-filter=d";
     println!("Running command: {cmd}");
-    let diff_file_string = run_command(&cmd);
+    let diff_file_string = command_runner.run_command(&cmd);
 
     // Parse diff file
     let coverage: Coverage = Coverage::new(&file_string);
+    let mut threshold_not_met = false;
 
     if !diff_file_string.is_empty() {
-        let diff_files = DiffFiles::new(&diff_file_string);
-        let line_coverage_percentage = diff_files.calculate_line_coverage(coverage.clone());
-        println!("Git diff coverage is {line_coverage_percentage:.2}%");
-
-        if line_coverage_percentage < args.threshold {
-            println!(
-                "Git diff coverage is below threshold of {:.2}%",
-                args.threshold
-            );
-            std::process::exit(1);
-        }
+        threshold_not_met =
+            get_coverage_on_diff(&diff_file_string, &coverage, args.threshold_change);
+    } else {
+        println!("No changes found");
     }
 
     let total_coverage_percentage = coverage.get_total_coverage();
     println!("Total coverage is {total_coverage_percentage:.2}%");
 
-    if total_coverage_percentage < args.threshold as f64 {
+    if total_coverage_percentage < args.threshold_total as f64 {
         println!(
             "Total coverage is below threshold of {:.2}%",
-            args.threshold
+            args.threshold_total
         );
+        threshold_not_met = true;
+    }
+
+    !threshold_not_met
+}
+
+fn main() {
+    let args = Args::parse();
+    let command_runner = CommandRunner;
+
+    let state = run_app(args, &command_runner);
+    if !state {
         std::process::exit(1);
     }
 }
+
+#[cfg(test)]
+mod tests {
+    use super::MockCommandRunnerTrait;
+    use super::*;
+
+    #[test]
+    fn test_change_directory() {
+        // Test existing directory
+        change_directory(Some(String::from(".")));
+        assert_eq!(
+            std::env::current_dir().unwrap().display().to_string(),
+            std::env::current_dir().unwrap().display().to_string()
+        );
+
+        // Test non-existing directory
+        assert!(
+            std::panic::catch_unwind(|| change_directory(Some(String::from(
+                "non-existing-directory"
+            ))))
+            .is_err()
+        );
+    }
+
+    #[test]
+    fn test_run_command() {
+        let command_runner = CommandRunner;
+        let result = command_runner.run_command("echo test");
+        assert_eq!(result.trim(), "test");
+    }
+
+    #[test]
+    fn test_get_coverage_on_diff() {
+        // Set up sample input data
+        let diff_string = std::fs::read_to_string("assets/diff_files/coverage.diff").unwrap();
+        let coverage_string =
+            std::fs::read_to_string("assets/coberta_coverage/coverage.xml").unwrap();
+        let coverage = Coverage::new(&coverage_string);
+
+        // Test with threshold below actual coverage
+        let result1 = get_coverage_on_diff(diff_string.as_str(), &coverage, 80.0);
+        assert!(result1);
+
+        // Test with threshold above actual coverage
+        let result2 = get_coverage_on_diff(diff_string.as_str(), &coverage, 20.0);
+        assert!(!result2);
+    }
+
+    #[test]
+    fn test_run_app() {
+        // Set up sample input data
+        let expected_success_args = Args {
+            coverage_file: "assets/coberta_coverage/repo_coverage.xml".to_string(),
+            git_dir: Some(".".into()),
+            branch: "main".to_string(),
+            threshold_change: 5.0,
+            threshold_total: 0.0,
+        };
+        let expected_fail_args_not_high_coverage = Args {
+            coverage_file: "assets/coberta_coverage/repo_coverage.xml".to_string(),
+            git_dir: Some(".".into()),
+            branch: "main".to_string(),
+            threshold_change: 100.0,
+            threshold_total: 0.0,
+        };
+
+        let expected_fail_args_fail_on_total = Args {
+            coverage_file: "assets/coberta_coverage/repo_coverage.xml".to_string(),
+            git_dir: Some(".".into()),
+            branch: "main".to_string(),
+            threshold_change: 0.0,
+            threshold_total: 100.0,
+        };
+
+        // Diff from file
+        let diff_string = std::fs::read_to_string("assets/diff_files/repo_test.diff").unwrap();
+
+        // Mocked command runner
+        let mut mock_command_runner = MockCommandRunnerTrait::new();
+        mock_command_runner
+            .expect_run_command()
+            .return_const(diff_string);
+
+        // Run the app with the mocked runner and expect an ok
+        let state = run_app(expected_success_args, &mock_command_runner);
+        assert!(state);
+
+        // Run the app with the mocked runner and expect a too low coverage
+        let state = run_app(expected_fail_args_not_high_coverage, &mock_command_runner);
+        assert!(!state);
+
+        // Run the app with the mocked runner and expect a too low coverage because of total and current coverage
+        let state = run_app(expected_fail_args_fail_on_total, &mock_command_runner);
+        assert!(!state);
+    }
+}
